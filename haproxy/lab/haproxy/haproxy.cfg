global
        log stdout format raw local0 info
        master-worker
        maxconn 25000   # numero maximo de conexoes que ele vai atender

        ca-base /etc/ssl/certs
        crt-base /etc/ssl/private

	ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS:DES-CBC3-SHA:TLS_RSA_WITH_3DES_EDE_CBC_SHA
        ssl-default-bind-options no-sslv3
	tune.ssl.default-dh-param 2048


defaults
        log global # configurações de log
        mode http  # modo de funcionamento (http ou tcp )
        option httplog # habilita log http
        option forwardfor except 127.0.0.0/8# para empurrar o ip do cliente para o backend
        option dontlognull # não loga conexões de checagem, ajuda a evitar log poluído
        timeout connect 1m # tempo máximo que o servidor aguarda para um conexão ser estabelecida
        timeout client  10m # tempo máximo de inatividade no lado do cliente
        timeout server  10m # tempo máximo de inatividade no lado do servidor
        retries  3 # qts vezes o clt ainda deve tentar se conectar após uma falha

	option http-server-close
	option redispatch
	timeout http-request 10s
	timeout queue 1m
	timeout http-keep-alive 10s
	timeout check 10s


        errorfile 400 /usr/local/etc/haproxy/errors/400.http
        errorfile 403 /usr/local/etc/haproxy/errors/403.http
        errorfile 408 /usr/local/etc/haproxy/errors/408.http
        errorfile 500 /usr/local/etc/haproxy/errors/500.http
        errorfile 502 /usr/local/etc/haproxy/errors/502.http
        errorfile 503 /usr/local/etc/haproxy/errors/503.http
        errorfile 504 /usr/local/etc/haproxy/errors/504.http
	

frontend stats 
	bind *:8443
        stats enable # habilita estatísticas
        stats uri / # url das estatísticas
        stats hide-version # ocultar versão
        stats auth labci:gitlabci # usuário/senha para acessar stats
        stats realm HAProxy\ Statistics # realm de autenticação
        stats refresh 10s
        stats show-legends
        stats show-node
        

peers mypeers
        peer local_haproxy 127.0.0.1:1024

frontend http
        bind *:80
        option forwardfor
	log-format %ci:%cp\ [%tr]\ %ft\ %b/%s\ %TR/%Tw/%Tc/%Tr/%Ta\ %ST\ %B\ %CC\ %CS\ %tsc\ %ac/%fc/%bc/%sc/%rc\ %sq/%bq\ %hr\ %hs\ %{+Q}r
        capture request header Host len 64
	##----------Linha para redirecionar www para nome do host-------##
        http-request redirect prefix http://%[hdr(host),regsub(^www\.,,i)] code 301 if { hdr_beg(host) -i www. }
        ##--------------------------------------------------------------##
	acl web hdr_end(host) -i app.labci.br
        http-request redirect scheme https if !{ ssl_fc }


frontend https
        bind *:443 ssl crt /usr/local/etc/haproxy/ssl/ alpn h2,http/1.1
        option dontlognull
        option forwardfor
        http-request set-header X-Forwarded-Proto https if { ssl_fc }
	option httplog # habilita log http
	log-format %ci:%cp\ [%tr]\ %ft\ %b/%s\ %TR/%Tw/%Tc/%Tr/%Ta\ %ST\ %B\ %CC\ %CS\ %tsc\ %ac/%fc/%bc/%sc/%rc\ %sq/%bq\ %hr\ %hs\ %{+Q}r
        capture request header Host len 64

	##-------------Pagina de manutencao----------------##
	#acl all_ips src 0.0.0.0/0			   ##
	#acl local_ip src 10.10.0.0/24                     ##
	#use_backend manutencao if all_ips !local_ip 	   ##
	##-------------------------------------------------##
	
	## -----------ACLs dominios dos sistemas-----------##
        acl haproxy hdr_end(host) -i haproxy.labci.br
        acl imagens hdr_end(host) -i imagens.labci.br
        acl browser hdr_end(host) -i webimagens.labci.br
        acl gitlab hdr_end(host) -i git.labci.br
        acl web hdr_end(host) -i app.labci.br

        ##-------------------------------------------------##	

	##-------------Pagina de manutencao----------------##
        acl all_ips src 0.0.0.0/0

#	use_backend manutencao if all_ips sample-web

        ##-------------------------------------------------##

	##------------ACLs de redirecionamento-------------##
	acl raiz path -i /

	##-------------------------------------------------##


	##--------Redirecionamento de URLs-----------------##

        ##-------------------------------------------------##

	##-------Redireciona o dominio para o sistema------##
        use_backend haproxy if haproxy
        use_backend gitlab if gitlab
        use_backend browser if browser
        use_backend imagens if imagens
        use_backend web if web
        ##-------------------------------------------------##

resolvers docker
    nameserver dns1 127.0.0.11:53
    resolve_retries 3
    timeout resolve 1s
    timeout retry   1s
    hold other      5s
    hold refused    5s
    hold nx         5s
    hold timeout    5s
    hold valid      1s
    hold obsolete   5s

backend haproxy
        log global # confs de log, no caso confs do global
	option httpclose # ajuda a fechar conexões que já deveriam ter sido encerradas
        option persist # habilitando persistentica
        option redispatch # limpar o cookie caso o backend caia
        balance roundrobin
        server-template haproxy 3 haproxy:8443 check resolvers docker init-addr none resolve-prefer ipv4

backend gitlab
        log global # confs de log, no caso confs do global
	option httpclose # ajuda a fechar conexões que já deveriam ter sido encerradas
        option persist # habilitando persistentica
        option redispatch # limpar o cookie caso o backend caia
        balance roundrobin
        server-template gitlab 3 gitlab:80 check resolvers docker init-addr none resolve-prefer ipv4

backend browser
        log global # confs de log, no caso confs do global
	option httpclose # ajuda a fechar conexões que já deveriam ter sido encerradas
        option persist # habilitando persistentica
        cookie  SERVERID insert indirect nocache
        balance roundrobin
        server-template browser 2 browser:8080 check resolvers docker init-addr none resolve-prefer ipv4 

backend imagens
        http-request set-header X-Forwarded-Proto https if { ssl_fc }
        log global # confs de log, no caso confs do global
	option httpclose # ajuda a fechar conexões que já deveriam ter sido encerradas
        option persist # habilitando persistentica
        cookie  SERVERID insert indirect nocache
        balance roundrobin
        server-template imagens 2 imagens:5000 check resolvers docker init-addr none resolve-prefer ipv4

backend web
        log global # confs de log, no caso confs do global
	option httpclose # ajuda a fechar conexões que já deveriam ter sido encerradas
        option persist # habilitando persistentica
        option redispatch # limpar o cookie caso o backend caia
        balance roundrobin
        #http-response set-header X-Frame-Options DENY
        #http-response replace-header Set-Cookie "^((?:(?!; [Ss]ecure\b).)*)\$" "\1; secure; httponly; SameSite=Strict" if { ssl_fc }
        #http-response del-header X-Powered-By
        #http-response del-header Server
        #dynamic-cookie-key MYKEY
        #cookie SRVID insert dynamic httponly secure attr "SameSite=Strict"
        cookie  SERVERID insert indirect nocache
        server-template web 3 app:8080 check resolvers docker init-addr none resolve-prefer ipv4


backend manutencao
	mode http
	errorfile  503 /usr/local/etc/haproxy/errors/503.http
